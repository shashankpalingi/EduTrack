import React from 'react';
import { StudentStats, PerformanceMetrics } from './StudentProgress';

export interface ExportData {
  studentStats: StudentStats[];
  metrics: PerformanceMetrics;
  timestamp: string;
  timeRange: string;
}

export class ExportUtils {
  /**
   * Export student progress data as CSV
   */
  static exportToCSV(data: ExportData): void {
    const { studentStats, metrics, timestamp, timeRange } = data;

    // Create CSV header
    const headers = [
      'Student Name',
      'Total Quizzes',
      'Completed Quizzes',
      'Average Score (%)',
      'Materials Viewed',
      'Engagement Level',
      'Last Activity'
    ];

    // Create CSV rows
    const rows = studentStats.map(student => [
      student.student_name,
      student.total_quizzes.toString(),
      student.completed_quizzes.toString(),
      student.average_score > 0 ? student.average_score.toString() : 'N/A',
      student.materials_viewed.toString(),
      student.engagement_level,
      student.last_activity
    ]);

    // Add summary row
    rows.unshift([
      'SUMMARY',
      '',
      '',
      metrics.averageScore.toString(),
      '',
      '',
      ''
    ]);

    rows.unshift([
      'Class Analytics Report',
      '',
      '',
      `Generated: ${timestamp}`,
      '',
      `Period: Last ${timeRange} days`,
      ''
    ]);

    rows.unshift([
      `Total Students: ${metrics.totalStudents}`,
      `Active Students: ${metrics.activeStudents}`,
      `Completion Rate: ${metrics.completionRate}%`,
      `Total Quizzes: ${metrics.totalQuizzes}`,
      `Total Materials: ${metrics.totalMaterials}`,
      '',
      ''
    ]);

    // Add empty row
    rows.unshift(['', '', '', '', '', '', '']);

    // Combine headers and rows
    const csvContent = [headers, ...rows]
      .map(row => row.map(field => `"${field}"`).join(','))
      .join('\n');

    // Download CSV
    this.downloadFile(csvContent, `student-progress-${Date.now()}.csv`, 'text/csv');
  }

  /**
   * Export student progress data as JSON
   */
  static exportToJSON(data: ExportData): void {
    const jsonContent = JSON.stringify(data, null, 2);
    this.downloadFile(jsonContent, `student-progress-${Date.now()}.json`, 'application/json');
  }

  /**
   * Generate detailed PDF report (placeholder for future implementation)
   */
  static exportToPDF(data: ExportData): void {
    // For now, we'll create a formatted text report
    const { studentStats, metrics, timestamp, timeRange } = data;

    const report = `
STUDENT PROGRESS ANALYTICS REPORT
Generated: ${timestamp}
Analysis Period: Last ${timeRange} days

CLASS OVERVIEW
==============
Total Students: ${metrics.totalStudents}
Active Students: ${metrics.activeStudents} (${metrics.totalStudents > 0 ? Math.round((metrics.activeStudents / metrics.totalStudents) * 100) : 0}%)
Average Quiz Score: ${metrics.averageScore}%
Completion Rate: ${metrics.completionRate}%
Total Quizzes Available: ${metrics.totalQuizzes}
Total Materials Available: ${metrics.totalMaterials}

STUDENT DETAILS
===============
${studentStats.map(student => `
Name: ${student.student_name}
Quizzes: ${student.completed_quizzes}/${student.total_quizzes} completed
Average Score: ${student.average_score > 0 ? student.average_score + '%' : 'N/A'}
Materials Viewed: ${student.materials_viewed}
Engagement Level: ${student.engagement_level}
Last Activity: ${student.last_activity}
${'‚îÄ'.repeat(50)}
`).join('')}

RECOMMENDATIONS
===============
‚Ä¢ Students with low engagement (${studentStats.filter(s => s.engagement_level === 'Low').length} students) may need additional support
‚Ä¢ Focus on improving quiz completion rates
‚Ä¢ Consider creating more interactive materials to boost engagement
‚Ä¢ Regular check-ins with inactive students recommended

Report generated by EduTrack Learning Analytics
    `.trim();

    this.downloadFile(report, `student-progress-report-${Date.now()}.txt`, 'text/plain');
  }

  /**
   * Generate summary statistics for quick overview
   */
  static generateSummary(studentStats: StudentStats[], metrics: PerformanceMetrics): string {
    const highEngagement = studentStats.filter(s => s.engagement_level === 'High').length;
    const mediumEngagement = studentStats.filter(s => s.engagement_level === 'Medium').length;
    const lowEngagement = studentStats.filter(s => s.engagement_level === 'Low').length;

    const topPerformers = studentStats
      .filter(s => s.average_score > 0)
      .sort((a, b) => b.average_score - a.average_score)
      .slice(0, 3);

    const strugglingStudents = studentStats
      .filter(s => s.average_score > 0 && s.average_score < 60)
      .sort((a, b) => a.average_score - b.average_score)
      .slice(0, 3);

    return `
üìä QUICK SUMMARY
‚Ä¢ Total Students: ${metrics.totalStudents}
‚Ä¢ Active This Period: ${metrics.activeStudents}
‚Ä¢ Class Average: ${metrics.averageScore}%

üéØ ENGAGEMENT BREAKDOWN
‚Ä¢ High: ${highEngagement} students
‚Ä¢ Medium: ${mediumEngagement} students
‚Ä¢ Low: ${lowEngagement} students

‚≠ê TOP PERFORMERS
${topPerformers.map((s, i) => `${i + 1}. ${s.student_name} (${s.average_score}%)`).join('\n')}

‚ö†Ô∏è NEEDS ATTENTION
${strugglingStudents.length > 0 ? strugglingStudents.map((s, i) => `${i + 1}. ${s.student_name} (${s.average_score}%)`).join('\n') : 'No students currently struggling'}
    `.trim();
  }

  /**
   * Helper function to download files
   */
  private static downloadFile(content: string, filename: string, mimeType: string): void {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    window.URL.revokeObjectURL(url);
  }

  /**
   * Copy summary to clipboard
   */
  static async copyToClipboard(text: string): Promise<boolean> {
    try {
      await navigator.clipboard.writeText(text);
      return true;
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        document.execCommand('copy');
        document.body.removeChild(textArea);
        return true;
      } catch (err) {
        document.body.removeChild(textArea);
        return false;
      }
    }
  }

  /**
   * Format data for email sharing
   */
  static formatForEmail(data: ExportData): string {
    const summary = this.generateSummary(data.studentStats, data.metrics);
    const subject = `Student Progress Report - ${new Date(data.timestamp).toLocaleDateString()}`;
    const body = encodeURIComponent(`Hi,

Please find the student progress analytics report below:

${summary}

Full detailed report is attached.

Best regards,
EduTrack Learning Analytics`);

    return `mailto:?subject=${encodeURIComponent(subject)}&body=${body}`;
  }
}

// Export component for integration
export const ExportMenu: React.FC<{
  data: ExportData;
  onExport: (type: 'csv' | 'json' | 'pdf') => void;
}> = ({ data, onExport }) => {
  const [isOpen, setIsOpen] = React.useState(false);
  const [copied, setCopied] = React.useState(false);

  const handleCopyClipboard = async () => {
    const summary = ExportUtils.generateSummary(data.studentStats, data.metrics);
    const success = await ExportUtils.copyToClipboard(summary);
    if (success) {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleEmailShare = () => {
    const emailUrl = ExportUtils.formatForEmail(data);
    window.location.href = emailUrl;
  };

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="inline-flex items-center px-3 py-2 border border-white/20 text-sm font-medium rounded-md text-white bg-white/10 hover:bg-white/20 transition-colors"
      >
        üìä Export
      </button>
    );
  }

  return (
    <div className="relative inline-block text-left">
      <div className="absolute right-0 z-10 mt-2 w-56 rounded-md bg-black/80 backdrop-blur-sm border border-white/20 shadow-lg">
        <div className="py-1">
          <button
            onClick={() => { onExport('csv'); setIsOpen(false); }}
            className="flex w-full items-center px-4 py-2 text-sm text-white hover:bg-white/10"
          >
            üìÑ Export as CSV
          </button>
          <button
            onClick={() => { onExport('json'); setIsOpen(false); }}
            className="flex w-full items-center px-4 py-2 text-sm text-white hover:bg-white/10"
          >
            üìã Export as JSON
          </button>
          <button
            onClick={() => { onExport('pdf'); setIsOpen(false); }}
            className="flex w-full items-center px-4 py-2 text-sm text-white hover:bg-white/10"
          >
            üìù Export as Report
          </button>
          <div className="border-t border-white/20 my-1"></div>
          <button
            onClick={handleCopyClipboard}
            className="flex w-full items-center px-4 py-2 text-sm text-white hover:bg-white/10"
          >
            {copied ? '‚úÖ Copied!' : 'üìã Copy Summary'}
          </button>
          <button
            onClick={handleEmailShare}
            className="flex w-full items-center px-4 py-2 text-sm text-white hover:bg-white/10"
          >
            ‚úâÔ∏è Share via Email
          </button>
          <div className="border-t border-white/20 my-1"></div>
          <button
            onClick={() => setIsOpen(false)}
            className="flex w-full items-center px-4 py-2 text-sm text-white/60 hover:bg-white/10"
          >
            ‚ùå Cancel
          </button>
        </div>
      </div>
    </div>
  );
};
